@model AgotSetupAnalyzerCore.AnalyzerConfigurationDTO

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
<body>
    <form id="ConfigForm" class="configForm divTable">
        <div class="configSectionLeft divCell">
            @Html.LabelFor(m => m.DeckList)
            <div class="configRow">
                @Html.TextAreaFor(m => m.DeckList, new { @class = "decklist" })
                @Html.ValidationMessageFor(m => m.DeckList)
            </div>
            &nbsp;
            <div class="configRow">
                <button id="analyzeButton" class="analyzeButton" type="button" onclick="AnalyzeList()">Analyze List</button>
            </div>
        </div>
        <button id="expandButton" class="expandButton" type="button" onclick="ToggleSection('advOptions')">Show Adv. Options</button>
        <div id="advOptions" class="expandArea hidden">
            <div class="configSectionRight divCell">
                <div>
                    @Html.LabelFor(m => m.NumberOfTrials, new { @class = "configLabel" })
                    @Html.EditorFor(m => m.NumberOfTrials)
                    @Html.ValidationMessageFor(m => m.NumberOfTrials)
                </div>

                <h3>Requirements</h3>
                <div class="notes">Failure to meet all requirements marks a setup as 'poor'.</div>
                <div class="configRow">
                    @Html.LabelFor(m => m.CharacterFloorForGoodSetup, new { @class = "configLabel" })
                    <div class="radioButtonSection">
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 0) 0
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 1) 1
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 2, new { @checked = "true" }) 2
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 3) 3
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 4) 4
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 5) 5
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 6) 6
                        @Html.RadioButtonFor(m => m.CharacterFloorForGoodSetup, 7) 7
                        @Html.ValidationMessageFor(m => m.CharacterFloorForGoodSetup)
                    </div>
                </div>
                <div class="configRow">
                    @Html.LabelFor(m => m.CardFloorForGoodSetup, new { @class = "configLabel" })
                    <div class="radioButtonSection">
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 0) 0
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 1) 1
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 2) 2
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 3, new { @checked = "true" }) 3
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 4) 4
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 5) 5
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 6) 6
                        @Html.RadioButtonFor(m => m.CardFloorForGoodSetup, 7) 7
                        @Html.ValidationMessageFor(m => m.CardFloorForGoodSetup)
                    </div>
                </div>
                <br />
                <div class="configRow">
                    @Html.LabelFor(m => m.RequireGreatCharacter, new { @class = "configLabelGreaterChar" })
                    @Html.CheckBoxFor(m => m.RequireGreatCharacter)
                    @Html.ValidationMessageFor(m => m.RequireGreatCharacter)
                </div>
                <div class="configRow">
                    @Html.LabelFor(m => m.RequireEconomy, new { @class = "configLabelEconomy" })
                    @Html.CheckBoxFor(m => m.RequireEconomy)
                    @Html.ValidationMessageFor(m => m.RequireEconomy)
                </div>

                <h3>Preferences</h3>
                <div class="notes">
                    As long as a setup meets the base requirements <b>prefer</b> will take precedence over all other metrics.
                    In cases where there are multiple types of <b>prefer</b> cards if it's impossible to include them all, the best hand with one of them will be chosen.
                </div>

                <div class="configRow">
                    @Html.LabelFor(m => m.PreferGreatCharacter, new { @class = "configLabelGreaterChar" })
                    @Html.CheckBoxFor(m => m.PreferGreatCharacter)
                    @Html.ValidationMessageFor(m => m.PreferGreatCharacter)
                </div>
                <div class="configRow">
                    @Html.LabelFor(m => m.PreferEconomy, new { @class = "configLabelEconomy" })
                    @Html.CheckBoxFor(m => m.PreferEconomy)
                    @Html.ValidationMessageFor(m => m.PreferEconomy)
                </div>
                <h3>Mulligan Options</h3>
                <div class="configRow">
                    @Html.LabelFor(m => m.MulliganAllPoorSetups, new { @class = "configLabelMulligan" })
                    @Html.CheckBoxFor(m => m.MulliganAllPoorSetups, new { @checked = "true" })
                    @Html.ValidationMessageFor(m => m.MulliganAllPoorSetups)
                </div>
                <div class="configRow">
                    @Html.LabelFor(m => m.MulliganNoEcon, new { @class = "configLabelMulligan" })
                    @Html.CheckBoxFor(m => m.MulliganNoEcon)
                    @Html.ValidationMessageFor(m => m.MulliganNoEcon)
                </div>
                <div class="configRow">
                    @Html.LabelFor(m => m.MulliganNoKey, new { @class = "configLabelMulligan" })
                    @Html.CheckBoxFor(m => m.MulliganNoKey)
                    @Html.ValidationMessageFor(m => m.MulliganNoKey)
                </div>
            </div>
            <div id="CardOptions" class="cardEdits divCell">

            </div>
        </div>
    </form>
    <br />
    <div id="analyzerResultsSection" class="resultHolder">
        <div class="MainChart">
            <canvas id="CardsUsedChart"></canvas>
        </div>
        <div class="divTable">
            <div class="divRow">
                <div class="chart divCell">
                    <canvas id="GoldUsedChart"></canvas>
                </div>
                <div class="chart divCell">
                    <canvas id="CharactersUsedChart"></canvas>
                </div>
            </div>
            <div class="divRow">
                <div class="chart divCell">
                    <canvas id="EconCardsUsedChart"></canvas>
                </div>
                <div id="ExtraInfo" class="chart divCell extraInfo">
                </div>
            </div>
            <div class="divRow">
                <div class="chart divCell">
                    <canvas id="CharsWithIconChart"></canvas>
                </div>
                <div class="chart divCell">
                    <canvas id="StrPerIconChart"></canvas>
                </div>
            </div>
        </div>
        <div id="usedCardsTable" class="divCell">
        </div>
    </div>
</body>

<script type="text/javascript">

    function AnalyzeList() {
        $.ajax({
            url: "Analyzer/AnalyzeDeck",
            data: $("#ConfigForm").serialize(),
            type: "POST",
            success: function (result) {
                jsonResponse = JSON.parse(result);

                /*GoldUsedChart*/
                $("#GoldUsedChart").parent().html("<canvas id=\"GoldUsedChart\"></canvas>");
                SetupGoldUsedChart(
                    jsonResponse["GoldUsed"],
                    document.getElementById("GoldUsedChart").getContext("2d"));

                /*CardsUsedChart*/
                $("#CardsUsedChart").parent().html("<canvas id=\"CardsUsedChart\"></canvas>");
                SetupCardsUsedChart(
                    jsonResponse["CardsUsed"],
                    document.getElementById("CardsUsedChart").getContext("2d"));

                /*CharactersUsedChart*/
                $("#CharactersUsedChart").parent().html("<canvas id=\"CharactersUsedChart\"></canvas>");
                SetupCharactersUsedChart(
                    jsonResponse["CharactersUsed"],
                    document.getElementById("CharactersUsedChart").getContext("2d"));

                /*EconCardsUsedChart*/
                $("#EconCardsUsedChart").parent().html("<canvas id=\"EconCardsUsedChart\"></canvas>");
                SetupEconCardsUsedChart(
                    jsonResponse["NumOfEconCards"],
                    document.getElementById("EconCardsUsedChart").getContext("2d"));

                /*CharsWithIconChart*/
                $("#CharsWithIconChart").parent().html("<canvas id=\"CharsWithIconChart\"></canvas>");
                SetupCharsWithIconChart(
                    jsonResponse["TotalCharWithIcon"],
                    document.getElementById("CharsWithIconChart").getContext("2d"));

                /*StrPerIconChart*/
                $("#StrPerIconChart").parent().html("<canvas id=\"StrPerIconChart\"></canvas>");
                SetupStrPerIconChart(
                    jsonResponse["TotalStrPerIcon"],
                    document.getElementById("StrPerIconChart").getContext("2d"));

                /*Extra Info*/
                $("#ExtraInfo").html("");
                $("#ExtraInfo").html($("#ExtraInfo").html()
                    .concat("<div class=\"mulligans\">Mulligans: " + jsonResponse["Mulligans"] + "%</div>"));
                $("#ExtraInfo").html($("#ExtraInfo").html()
                    .concat("<div class=\"PoorSetups\">Poor Setups: " + jsonResponse["BadSetups"] + "%</div>"));
                $("#ExtraInfo").html($("#ExtraInfo").html()
                    .concat("<div class=\"NumGreatChar\">Setups with 4-cost Character: " + jsonResponse["NumWithGreatCharacter"] + "%</div>"));
                /*Used Cards Table*/
                $("#usedCardsTable").html("");
                $.each(jsonResponse["TimesCardUsedInSetup"], function (key, value) {
                    $("#usedCardsTable").html($("#usedCardsTable").html()
                        .concat("<div class=\"usedCard\"><img class=\"usedCardsImages\" src=\"http://thronesdb.com" + key + "\" />"
                        + "<div class=\"usedCardsValues\">" + value.toFixed(2) + "%</div></div>"));
                });
            }
        });
    }

    function SetupCharsWithIconChart(data, context) {
        var chart = new Chart(context, {
            type: "bar",
            data: {
                labels: ["Military", "Intrigue", "Power"],
                datasets: [{
                    fill: true,
                    data: [data["Military"], data["Intrigue"], data["Power"]],
                    backgroundColor: ["rgba(255,0,0,0.5)", "rgba(0,255,0,0.5)", "rgba(0,0,255,0.5)"]
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Avg Characters"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2);
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            suggestedMin: 0.2,
                            stepSize: 0.2,
                            callback: function (value) {
                                return Number(value).toFixed(2);
                            }
                        }
                    }]
                }
            }
        });
    }

    function SetupStrPerIconChart(data, context) {
        var chart = new Chart(context, {
            type: "bar",
            data: {
                labels: ["Military", "Intrigue", "Power"],
                datasets: [{
                    fill: true,
                    data: [data["Military"], data["Intrigue"], data["Power"]],
                    backgroundColor: ["rgba(255,0,0,0.5)", "rgba(0,255,0,0.5)", "rgba(0,0,255,0.5)"]
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Avg Strength"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2);
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            suggestedMin: 0.5,
                            stepSize: 0.5,
                            callback: function (value) {
                                return Number(value).toFixed(2);
                            }
                        }
                    }]
                }
            }
        });
    }

    function SetupEconCardsUsedChart(data, context) {
        var chart = new Chart(context, {
            type: "line",
            data: {
                labels: CreateSimpleLable(data, ""),
                datasets: [{
                    fill: true,
                    pointRadius: 5,
                    pointHoverRadius: 8,
                    pointHitRadius: 15,
                    data: data,
                    backgroundColor: "rgba(0,0,0,0.4)"
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Econ Cards Used"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2) + '%';
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function (value) {
                                return Number(value).toFixed(0) + "%";
                            }
                        }
                    }]
                }
            }
        });
    }

    function SetupCharactersUsedChart(data, context) {
        var chart = new Chart(context, {
            type: "line",
            data: {
                labels: CreateSimpleLable(data, ""),
                datasets: [{
                    fill: true,
                    pointRadius: 5,
                    pointHoverRadius: 8,
                    pointHitRadius: 15,
                    data: data,
                    backgroundColor: "rgba(0,0,0,0.4)"
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Characters Used"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2) + '%';
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function (value) {
                                return Number(value).toFixed(0) + "%";
                            }
                        }
                    }]
                }
            }
        });
    }

    function SetupCardsUsedChart(data, context) {
        var chart = new Chart(context, {
            type: "line",
            data: {
                labels: CreateSimpleLable(data, ""),
                datasets: [{
                    fill: true,
                    pointRadius: 5,
                    pointHoverRadius: 8,
                    pointHitRadius: 15,
                    data: data,
                    backgroundColor: "rgba(0,0,0,0.4)"
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Cards Used"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2) + '%';
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function (value) {
                                return Number(value).toFixed(0) + "%";
                            }
                        }
                    }]
                }
            }
        });
    }

    function SetupGoldUsedChart(data, context) {
        var chart = new Chart(context, {
            type: "line",
            data: {
                labels: CreateSimpleLable(data, "g"),
                datasets: [{
                    fill: true,
                    pointRadius: 5,
                    pointHoverRadius: 8,
                    pointHitRadius: 15,
                    data: data,
                    backgroundColor: "rgba(218,165,32,0.7)"
                }]
            },
            options: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: "Gold Used"
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItems, data) {
                            return Number(tooltipItems.yLabel).toFixed(2) + '%';
                        }
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            callback: function (value) {
                                return Number(value).toFixed(0) + "%";
                            }
                        }
                    }]
                }
            }
        });
    }

    function CreateSimpleLable(dataArray, suffix) {
        var x = [];
        for (i = 0; i < dataArray.length; i++)
            x.push(i + suffix);

        return x;
    }

    function ToggleSection(sectionId) {
        if ($("#" + sectionId).hasClass('hidden'))
            $("#" + sectionId).removeClass('hidden');
        else
            $("#" + sectionId).addClass('hidden');
    }
</script>